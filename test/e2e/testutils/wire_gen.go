// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package testutils

import (
	"github.com/gin-gonic/gin"
	"github.com/go-redis/redis/v8"
	"go.uber.org/zap"
	"gorm.io/gorm"
	"mrs/internal/api/handlers"
	"mrs/internal/api/middleware"
	"mrs/internal/api/routers"
	"mrs/internal/app"
	"mrs/internal/infrastructure/cache"
	"mrs/internal/infrastructure/config"
	"mrs/internal/infrastructure/persistence/mysql/repository"
	"mrs/internal/utils"
	"mrs/pkg/log"
)

// Injectors from wire.go:

func InitializeTestServer(input config.ConfigInput) (*TestServerComponents, func(), error) {
	configConfig, err := config.LoadConfig(input)
	if err != nil {
		return nil, nil, err
	}
	databaseConfig := configConfig.DatabaseConfig
	logConfig := configConfig.LogConfig
	v := _wireValue
	logger, cleanup, err := log.NewZapLogger(logConfig, v...)
	if err != nil {
		return nil, nil, err
	}
	db, cleanup2, err := repository.CreateDBConnection(databaseConfig, logConfig, logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	redisConfig := configConfig.RedisConfig
	client, cleanup3, err := cache.NewRedisClient(redisConfig, logger)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	healthHandler := handlers.NewHealthHandler(db, client, logger)
	unitOfWork := repository.NewGormUnitOfWork(db, logger)
	userRepository := repository.NewGormUserRepository(db, logger)
	authConfig := configConfig.AuthConfig
	passwordHasher := utils.NewBcryptHasher(authConfig)
	jwtConfig := configConfig.JWTConfig
	jwtManager, err := utils.NewJWTManagerImpl(jwtConfig)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	authService := app.NewAuthService(unitOfWork, userRepository, passwordHasher, jwtManager, logger)
	authHandler := handlers.NewAuthHandler(authService, logger)
	roleRepository := repository.NewGormRoleRepository(db, logger)
	userService := app.NewUserService(unitOfWork, userRepository, roleRepository, passwordHasher, logger)
	userHandler := handlers.NewUserHandler(userService, logger)
	movieRepository := repository.NewGormMovieRepository(db, logger)
	genreRepository := repository.NewGormGenreRepository(db, logger)
	movieCache := cache.NewRedisMovieCache(client, logger)
	movieService := app.NewMovieService(unitOfWork, movieRepository, genreRepository, movieCache, logger)
	movieHandler := handlers.NewMovieHandler(movieService, logger)
	cinemaHallRepository := repository.NewGormCinemaHallRepository(db, logger)
	seatRepository := repository.NewGormSeatRepository(db, logger)
	cinemaService := app.NewCinemaService(unitOfWork, cinemaHallRepository, seatRepository, logger)
	cinemaHandler := handlers.NewCinemaHandler(cinemaService, logger)
	showtimeRepository := repository.NewGormShowtimeRepository(db, logger)
	bookingRepository := repository.NewGormBookingRepository(db, logger)
	showtimeCache := cache.NewRedisShowtimeCache(client, logger)
	seatCache := cache.NewRedisSeatCache(client, logger)
	lockProvider := cache.NewRedisLockProvider(client, logger)
	showtimeService := app.NewShowtimeService(unitOfWork, showtimeRepository, seatRepository, bookingRepository, showtimeCache, seatCache, lockProvider, logger)
	showtimeHandler := handlers.NewShowtimeHandler(showtimeService, logger)
	bookingService := app.NewBookingService(unitOfWork, bookingRepository, showtimeRepository, seatCache, showtimeCache, showtimeService, lockProvider, logger)
	bookingHandler := handlers.NewBookingHandler(bookingService, logger)
	reportService := app.NewReportService(logger, bookingRepository)
	reportHandler := handlers.NewReportHandler(reportService, logger)
	auth := middleware.AuthMiddleware(jwtManager, logger)
	admin := middleware.AdminMiddleware(jwtManager, logger)
	middlewareLogger := middleware.LoggerMiddleware(logger)
	engine := routers.SetupRouter(healthHandler, authHandler, userHandler, movieHandler, cinemaHandler, showtimeHandler, bookingHandler, reportHandler, auth, admin, middlewareLogger)
	testServerComponents := NewTestServerComponents(engine, db, client, logger, passwordHasher)
	return testServerComponents, func() {
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}

var (
	_wireValue = []zap.Option{}
)

// wire.go:

type TestServerComponents struct {
	Router *gin.Engine
	DB     *gorm.DB
	RDB    *redis.Client
	Logger log.Logger
	Hasher utils.PasswordHasher
}

func NewTestServerComponents(router *gin.Engine,
	db *gorm.DB,
	rdb *redis.Client,
	logger log.Logger,
	hasher utils.PasswordHasher,
) *TestServerComponents {
	return &TestServerComponents{
		Router: router,
		DB:     db,
		RDB:    rdb,
		Logger: logger,
		Hasher: hasher,
	}
}
