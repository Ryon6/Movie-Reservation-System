// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"go.uber.org/zap"
	"gorm.io/gorm"
	"mrs/internal/infrastructure/config"
	"mrs/internal/infrastructure/persistence/mysql/repository"
	"mrs/internal/utils"
	"mrs/pkg/log"
)

// Injectors from wire.go:

func InitializeMigrate(input config.ConfigInput) (*MigrateComponents, func(), error) {
	configConfig, err := config.LoadConfig(input)
	if err != nil {
		return nil, nil, err
	}
	databaseConfig := configConfig.DatabaseConfig
	logConfig := configConfig.LogConfig
	v := _wireValue
	logger, cleanup, err := log.NewZapLogger(logConfig, v...)
	if err != nil {
		return nil, nil, err
	}
	db, cleanup2, err := repository.CreateDBConnection(databaseConfig, logConfig, logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	authConfig := configConfig.AuthConfig
	passwordHasher := utils.NewBcryptHasher(authConfig)
	migrateComponents := NewMigrateComponents(db, logger, passwordHasher)
	return migrateComponents, func() {
		cleanup2()
		cleanup()
	}, nil
}

var (
	_wireValue = []zap.Option{}
)

// wire.go:

type MigrateComponents struct {
	DB     *gorm.DB
	Logger log.Logger
	Hasher utils.PasswordHasher
}

func NewMigrateComponents(db *gorm.DB, logger log.Logger, hasher utils.PasswordHasher) *MigrateComponents {
	return &MigrateComponents{
		DB:     db,
		Logger: logger,
		Hasher: hasher,
	}
}
